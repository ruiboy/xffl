type AFLClub {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
}
input CreateFFLPlayerInput {
  name: String!
  clubId: ID!
}
type FFLClub {
  id: ID!
  name: String!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  players: [FFLPlayer!]!
}
type FFLClubSeason {
  id: ID!
  clubId: ID!
  seasonId: ID!
  clubName: String!
  played: Int!
  won: Int!
  lost: Int!
  drawn: Int!
  pointsFor: Int!
  pointsAgainst: Int!
  extraPoints: Int!
  premiershipPoints: Int!
  percentage: Float!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}
type FFLPlayer {
  id: ID!
  name: String!
  clubId: ID!
  createdAt: String!
  updatedAt: String!
  deletedAt: String
}
type GatewayInfo {
  version: String!
  services: [String!]!
  lastBuild: String!
  uptime: Float!
}
type Mutation {
  createFFLPlayer(input: CreateFFLPlayerInput!): FFLPlayer!
  updateFFLPlayer(input: UpdateFFLPlayerInput!): FFLPlayer!
  deleteFFLPlayer(id: ID!): Boolean!
}
type Query {
  _gateway: GatewayInfo!
  aflClubs: [AFLClub!]!
  fflClubs: [FFLClub!]!
  fflPlayers(clubId: ID): [FFLPlayer!]!
  fflLadder(seasonId: ID!): [FFLClubSeason!]!
}
input UpdateFFLPlayerInput {
  id: ID!
  name: String!
}
