package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"
	"xffl/services/ffl/internal/adapters/graphql/model"
	"xffl/services/ffl/internal/domain/ffl"
)

// CreateFFLPlayer is the resolver for the createFFLPlayer field.
func (r *mutationResolver) CreateFFLPlayer(ctx context.Context, input model.CreateFFLPlayerInput) (*model.FFLPlayer, error) {
	clubID, err := ParseID(input.ClubID)
	if err != nil {
		return nil, fmt.Errorf("invalid club ID: %w", err)
	}

	player, err := r.playerUseCase.CreatePlayer(input.Name, clubID)
	if err != nil {
		return nil, fmt.Errorf("failed to create player: %w", err)
	}

	return PlayerToGraphQL(player), nil
}

// UpdateFFLPlayer is the resolver for the updateFFLPlayer field.
func (r *mutationResolver) UpdateFFLPlayer(ctx context.Context, input model.UpdateFFLPlayerInput) (*model.FFLPlayer, error) {
	id, err := ParseID(input.ID)
	if err != nil {
		return nil, fmt.Errorf("invalid player ID: %w", err)
	}

	player, err := r.playerUseCase.UpdatePlayer(id, input.Name)
	if err != nil {
		return nil, fmt.Errorf("failed to update player: %w", err)
	}

	return PlayerToGraphQL(player), nil
}

// DeleteFFLPlayer is the resolver for the deleteFFLPlayer field.
func (r *mutationResolver) DeleteFFLPlayer(ctx context.Context, id string) (bool, error) {
	playerID, err := ParseID(id)
	if err != nil {
		return false, fmt.Errorf("invalid player ID: %w", err)
	}

	err = r.playerUseCase.DeletePlayer(playerID)
	if err != nil {
		return false, fmt.Errorf("failed to delete player: %w", err)
	}

	return true, nil
}

// FflClubs is the resolver for the fflClubs field.
func (r *queryResolver) FflClubs(ctx context.Context) ([]*model.FFLClub, error) {
	clubs, err := r.clubUseCase.GetAllClubs()
	if err != nil {
		return nil, fmt.Errorf("failed to get clubs: %w", err)
	}

	return ClubsToGraphQL(clubs), nil
}

// FflPlayers is the resolver for the fflPlayers field.
func (r *queryResolver) FflPlayers(ctx context.Context, clubID *string) ([]*model.FFLPlayer, error) {
	var players []ffl.Player
	var err error

	if clubID != nil {
		id, parseErr := ParseID(*clubID)
		if parseErr != nil {
			return nil, fmt.Errorf("invalid club ID: %w", parseErr)
		}
		players, err = r.playerUseCase.GetPlayersByClubID(id)
	} else {
		players, err = r.playerUseCase.GetAllPlayers()
	}

	if err != nil {
		return nil, fmt.Errorf("failed to get players: %w", err)
	}

	return PlayersToGraphQL(players), nil
}

// FflLadder is the resolver for the fflLadder field.
func (r *queryResolver) FflLadder(ctx context.Context, seasonID string) ([]*model.FFLClubSeason, error) {
	id, err := ParseID(seasonID)
	if err != nil {
		return nil, fmt.Errorf("invalid season ID: %w", err)
	}

	clubSeasons, err := r.clubSeasonUseCase.GetLadderBySeasonID(id)
	if err != nil {
		return nil, fmt.Errorf("failed to get ladder: %w", err)
	}

	return ClubSeasonsToGraphQL(clubSeasons), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
